{"version":3,"file":"static/js/877.bc52d895.chunk.js","mappings":"sQAKe,SAASA,IACtB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAmBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGAEdJ,GAAa,GAFC,UAGQK,EAAAA,EAAAA,IAAcX,GAHtB,OAGRY,EAHQ,OAIdR,EAASQ,GAJK,gDAMdJ,GAAS,GANK,yBAQdF,GAAa,GARC,4EAAH,qDAWfI,GAED,GAAE,CAACV,IAEiB,IAAjBG,EAAMU,QAAiBR,GAMzB,gCACGE,GAAS,iCAEV,wBACGJ,EAAMW,KAAI,SAAAC,GACT,OAAO,wBAAmBA,EAAKC,MAAfD,EAAKf,GACtB,UAXE,kEAeV,C,mMC1CKiB,EAAU,mCAKT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,qCAAwCF,IAD1D,cACCG,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBL,EAAAA,EAAAA,IAAA,+BACGF,EADH,iCACmCO,EADnC,YADlB,cACCJ,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBP,EAAAA,EAAAA,IAAA,gBACZO,EADY,oBACOT,EADP,oBADlB,cACCG,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeV,EAAtB,+CAAO,OAAP,oBAAO,WAA6BX,GAA7B,uFACkBmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCiB,IAD3D,cACCG,EADD,yBAEEA,EAASC,KAAKN,MAFhB,kEAKA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAA+B3B,GAA/B,uFACkBmB,EAAAA,EAAAA,IAAA,gBAAmBnB,EAAnB,4BAAyCiB,IAD3D,cACCG,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEA1BPH,EAAAA,EAAAA,SAAAA,QAFiB,8B","sources":["components/Cast/Cast.jsx","services/movieApi.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCasts } from 'services/movieApi';\n\n\nexport default function Cast() {\n  const { id } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const reviews = await getMovieCasts(id);\n        setCasts(reviews);\n      } catch (e) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n\n  }, [id]);\n\n  if (casts.length === 0 && !isLoading) {\n    return <p>We don't have any casts for this movie.</p>;\n  }\n\n  \n  return (\n    <>\n      {error && 'Error, please reload the page'}\n\n      <ul>\n        {casts.map(cast => {\n          return <li key={cast.id}>{cast.name}</li>;\n        })}\n      </ul>\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '5f76dde929e4c69194ca7d9e261d3a85';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getPopularMovies() {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n}\n\nexport async function getMoviesByQuery(movie) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${movie}&page=1`\n  );\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieCasts(id) {\n  const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n  return response.data.results;\n}\n"],"names":["Cast","id","useParams","useState","casts","setCasts","isLoading","setIsLoading","error","setError","useEffect","fetchData","getMovieCasts","reviews","length","map","cast","name","API_KEY","getPopularMovies","axios","response","data","results","getMoviesByQuery","movie","getMovieDetails","movieId","getMovieReviews"],"sourceRoot":""}